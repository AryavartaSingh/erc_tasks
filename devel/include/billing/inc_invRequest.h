// Generated by gencpp from file billing/inc_invRequest.msg
// DO NOT EDIT!


#ifndef BILLING_MESSAGE_INC_INVREQUEST_H
#define BILLING_MESSAGE_INC_INVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace billing
{
template <class ContainerAllocator>
struct inc_invRequest_
{
  typedef inc_invRequest_<ContainerAllocator> Type;

  inc_invRequest_()
    : qty(0)
    , total(0)  {
    }
  inc_invRequest_(const ContainerAllocator& _alloc)
    : qty(0)
    , total(0)  {
  (void)_alloc;
    }



   typedef int32_t _qty_type;
  _qty_type qty;

   typedef int32_t _total_type;
  _total_type total;





  typedef boost::shared_ptr< ::billing::inc_invRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::billing::inc_invRequest_<ContainerAllocator> const> ConstPtr;

}; // struct inc_invRequest_

typedef ::billing::inc_invRequest_<std::allocator<void> > inc_invRequest;

typedef boost::shared_ptr< ::billing::inc_invRequest > inc_invRequestPtr;
typedef boost::shared_ptr< ::billing::inc_invRequest const> inc_invRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::billing::inc_invRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::billing::inc_invRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::billing::inc_invRequest_<ContainerAllocator1> & lhs, const ::billing::inc_invRequest_<ContainerAllocator2> & rhs)
{
  return lhs.qty == rhs.qty &&
    lhs.total == rhs.total;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::billing::inc_invRequest_<ContainerAllocator1> & lhs, const ::billing::inc_invRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace billing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::billing::inc_invRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::billing::inc_invRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::billing::inc_invRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::billing::inc_invRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::billing::inc_invRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::billing::inc_invRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::billing::inc_invRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efb79c982100d13d404de53583444bca";
  }

  static const char* value(const ::billing::inc_invRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefb79c982100d13dULL;
  static const uint64_t static_value2 = 0x404de53583444bcaULL;
};

template<class ContainerAllocator>
struct DataType< ::billing::inc_invRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "billing/inc_invRequest";
  }

  static const char* value(const ::billing::inc_invRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::billing::inc_invRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 qty\n"
"int32 total\n"
;
  }

  static const char* value(const ::billing::inc_invRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::billing::inc_invRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.qty);
      stream.next(m.total);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct inc_invRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::billing::inc_invRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::billing::inc_invRequest_<ContainerAllocator>& v)
  {
    s << indent << "qty: ";
    Printer<int32_t>::stream(s, indent + "  ", v.qty);
    s << indent << "total: ";
    Printer<int32_t>::stream(s, indent + "  ", v.total);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BILLING_MESSAGE_INC_INVREQUEST_H
